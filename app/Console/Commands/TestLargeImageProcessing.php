<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Awcodes\Curator\Models\Media;
use App\Jobs\ProcessImageImmediately;

class TestLargeImageProcessing extends Command
{
    protected $signature = 'test:large-image';
    protected $description = 'ุงุฎุชุจุงุฑ ูุนุงูุฌุฉ ุงูุตูุฑ ุงููุจูุฑุฉ (15MB+)';

    public function handle()
    {
        $this->info('๐งช ุจุฏุก ุงุฎุชุจุงุฑ ูุนุงูุฌุฉ ุงูุตูุฑ ุงููุจูุฑุฉ...');

        // ุฅูุดุงุก ุตูุฑุฉ PNG ุญููููุฉ ูุจูุฑุฉ
        $width = 2000;
        $height = 1500;
        $image = imagecreatetruecolor($width, $height);
        
        // ุฅุถุงูุฉ ุฃููุงู ุนุดูุงุฆูุฉ ูุฌุนู ุงูุตูุฑุฉ ุฃูุจุฑ
        for ($i = 0; $i < 500; $i++) {
            $color = imagecolorallocate($image, rand(0, 255), rand(0, 255), rand(0, 255));
            imagefilledrectangle($image, rand(0, $width), rand(0, $height), rand(0, $width), rand(0, $height), $color);
        }
        
        // ุญูุธ ูู buffer ุจุฏูู ุถุบุท
        ob_start();
        imagepng($image, null, 0); // 0 = no compression
        $largeImageData = ob_get_clean();
        imagedestroy($image);

        $originalSize = strlen($largeImageData);
        $this->info('๐ ุญุฌู ุงูุตูุฑุฉ: ' . round($originalSize / 1024 / 1024, 2) . ' MB');

        try {
            // ุฑูุน ุงูููู ุฅูู local storage
            $filename = 'test-images/test-large-' . Str::random(8) . '.png';
            Storage::disk('public')->put($filename, $largeImageData);

            $this->info('๐พ ุชู ุญูุธ ุงูููู ูู storage/app/public');

            // ุฅูุดุงุก ุณุฌู ูู Curator
            $media = Media::create([
                'name' => 'Test Large Image',
                'path' => $filename,
                'disk' => 'public',
                'size' => $originalSize,
                'type' => 'image',
                'ext' => 'png',
            ]);

            $this->info('๐๏ธ ุชู ุฅูุดุงุก ุณุฌู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
            $this->info('ID: ' . $media->id);

            // ุชุดุบูู Job ุงููุนุงูุฌุฉ ููุฑุงู
            $startTime = microtime(true);
            $this->info('โก ุชุดุบูู Job ุงููุนุงูุฌุฉ ููุฑุงู...');

            $job = new \App\Jobs\ProcessImageImmediately($media->id);
            $job->handle();

            $endTime = microtime(true);
            $processingTime = round($endTime - $startTime, 2);

            // ูุญุต ุงููุชูุฌุฉ
            $media->refresh();
            $finalSize = $media->size;

            $this->info('๐ ุงููุชูุฌุฉ ุงูููุงุฆูุฉ:');
            $this->info('ุงููุฑุต: ' . $media->disk);
            $this->info('ุงููุณุงุฑ: ' . $media->path);
            $this->info('ุงูุญุฌู ุงูููุงุฆู: ' . round($finalSize / 1024, 2) . ' KB');
            $this->info('ููุช ุงููุนุงูุฌุฉ: ' . $processingTime . ' ุซุงููุฉ');

            $compressionRatio = round((1 - $finalSize / $originalSize) * 100, 2);
            $this->info('ูุณุจุฉ ุงูุถุบุท: ' . $compressionRatio . '%');

            if (Storage::disk('public')->exists($media->path)) {
                $this->info('โ ุชูุช ุงููุนุงูุฌุฉ ุจูุฌุงุญ!');
                $this->info('๐พ ุชูููุฑ ูู ุงููุณุงุญุฉ: ' . round(($originalSize - $finalSize) / 1024 / 1024, 2) . ' MB');
            } else {
                $this->error('โ ูุดูุช ุงููุนุงูุฌุฉ');
            }

        } catch (\Exception $e) {
            $this->error('โ ุฎุทุฃ: ' . $e->getMessage());
        }

        $this->info('๐ ุงูุชูู ุงูุงุฎุชุจุงุฑ!');
    }
}
