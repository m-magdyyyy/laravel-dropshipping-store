<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Awcodes\Curator\Models\Media;
use App\Jobs\ProcessImageImmediately;

class TestImageProcessingLight extends Command
{
    protected $signature = 'test:image-light';
    protected $description = 'ุงุฎุชุจุงุฑ ุณุฑูุน ููุนุงูุฌุฉ ุงูุตูุฑ ุงูุฎูููุฉ';

    public function handle()
    {
        $this->info('๐งช ุจุฏุก ุงุฎุชุจุงุฑ ูุนุงูุฌุฉ ุงูุตูุฑ ุงูุฎูููุฉ...');

        try {
            // ุฅูุดุงุก ุตูุฑุฉ PNG ุญููููุฉ ุจุงุณุชุฎุฏุงู GD
            $width = 800;
            $height = 600;
            $image = imagecreatetruecolor($width, $height);
            
            // ุฅุถุงูุฉ ุฃููุงู ุนุดูุงุฆูุฉ
            for ($i = 0; $i < 50; $i++) {
                $color = imagecolorallocate($image, rand(0, 255), rand(0, 255), rand(0, 255));
                imagefilledrectangle($image, rand(0, $width), rand(0, $height), rand(0, $width), rand(0, $height), $color);
            }
            
            // ุญูุธ ูู buffer
            ob_start();
            imagepng($image, null, 0); // 0 = no compression (ุฃูุจุฑ ุญุฌู)
            $imageData = ob_get_clean();
            imagedestroy($image);

            $this->info('๐ธ ุชู ุฅูุดุงุก ุตูุฑุฉ PNG ุญููููุฉ (' . round(strlen($imageData) / 1024, 2) . ' KB)');

            // ุฑูุน ุงูููู ุฅูู local storage
            $filename = 'test-images/test-large-' . Str::random(8) . '.png';
            Storage::disk('public')->put($filename, $imageData);

            $this->info('๐พ ุชู ุญูุธ ุงูููู ูู storage/app/public (' . round(strlen($imageData) / 1024 / 1024, 2) . ' MB)');

            // ุฅูุดุงุก ุณุฌู ูู Curator
            $media = Media::create([
                'name' => 'Test Large Image',
                'path' => $filename,
                'disk' => 'public',
                'size' => strlen($imageData),
                'type' => 'image',
                'ext' => 'png',
            ]);

            $this->info('๐๏ธ ุชู ุฅูุดุงุก ุณุฌู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
            $this->info('ID: ' . $media->id);
            $this->info('ุงูุญุฌู ุงูุฃุตูู: ' . round(strlen($imageData) / 1024, 2) . ' KB');

            // ุชุดุบูู Job ุงููุนุงูุฌุฉ ููุฑุงู (ุจุฏูู queue)
            $this->info('โก ุชุดุบูู Job ุงููุนุงูุฌุฉ ููุฑุงู...');
            $job = new \App\Jobs\ProcessImageImmediately($media->id);
            $job->handle();

            // ุงูุชุธุงุฑ ูุตูุฑ
            sleep(2);

            $media->refresh();
            $this->info('๐ ุงููุชูุฌุฉ:');
            $this->info('ุงููุฑุต: ' . $media->disk);
            $this->info('ุงููุณุงุฑ: ' . $media->path);
            $this->info('ุงูุญุฌู: ' . $media->size . ' bytes');
            $this->info('ุงูููุน: ' . $media->mime_type);

            if (Storage::disk('public')->exists($media->path)) {
                $this->info('โ ุชูุช ุงููุนุงูุฌุฉ ุจูุฌุงุญ!');
                
                // ุนุฑุถ ูุนูููุงุช ุฅุถุงููุฉ
                $finalSize = Storage::disk('public')->size($media->path);
                $this->info('ุงูุญุฌู ุงูููุงุฆู: ' . round($finalSize / 1024, 2) . ' KB');
                $this->info('ูุณุจุฉ ุงูุถุบุท: ' . round((1 - $finalSize / strlen($imageData)) * 100, 2) . '%');
            } else {
                $this->error('โ ูุดูุช ุงููุนุงูุฌุฉ');
            }

        } catch (\Exception $e) {
            $this->error('โ ุฎุทุฃ: ' . $e->getMessage());
        }

        $this->info('๐ ุงูุชูู ุงูุงุฎุชุจุงุฑ!');
    }
}
